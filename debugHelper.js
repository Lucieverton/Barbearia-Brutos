// üõ†Ô∏è HOPWEB DEBUGGER - Analisador Estrutural
// Autor: [Seu Nome]
// Descri√ß√£o: Verifica HTML, CSS e JavaScript, apontando erros e sugerindo corre√ß√µes detalhadas.

// üîπ Mensagens educativas para aprendizado
const MENSAGENS_EDUCATIVAS = [
  "üí° JavaScript √© uma linguagem baseada em eventos. Sempre trate eventos como cliques e teclas pressionadas!",
  "‚ö†Ô∏è Evite manipular o DOM em loops grandes, pois pode afetar a performance do navegador.",
  "üîß O `console.log()` √© seu melhor amigo para debug. Use-o para entender o fluxo do c√≥digo.",
  "üìå Use `let` e `const` em vez de `var` para evitar problemas de escopo.",
  "üöÄ As fun√ß√µes ass√≠ncronas (`async/await`) tornam seu c√≥digo mais limpo e f√°cil de ler.",
  "üîç Para evitar bugs, sempre verifique se um elemento existe antes de manipul√°-lo!",
  "üìÇ Separe seu c√≥digo em arquivos pequenos e reutiliz√°veis para melhor manuten√ß√£o."
];

// Exibir uma mensagem educativa aleat√≥ria
console.info("%cüì¢ Dica de JavaScript:", "color: blue; font-weight: bold;", MENSAGENS_EDUCATIVAS[Math.floor(Math.random() * MENSAGENS_EDUCATIVAS.length)]);

// üîπ Analisador de HTML
function verificarHTML() {
    console.group("%cüîç Analisando HTML...", "color: green; font-weight: bold;");
    let ids = new Set();
    let erros = 0;

    document.querySelectorAll("[id]").forEach(el => {
        if (ids.has(el.id)) {
            console.error(`üö® ERRO: ID duplicado encontrado: #${el.id}. IDs devem ser √∫nicos!`);
            erros++;
        } else {
            ids.add(el.id);
        }
    });

    document.querySelectorAll("button, input, select, textarea").forEach(el => {
        if (!el.id) {
            console.warn(`‚ö†Ô∏è Aten√ß√£o: O elemento <${el.tagName.toLowerCase()}> n√£o tem um ID. Isso pode dificultar sua manipula√ß√£o no JavaScript.`);
        }
    });

    if (erros === 0) {
        console.info("‚úÖ Nenhum erro cr√≠tico encontrado no HTML.");
    }
    console.groupEnd();
}

// üîπ Analisador de CSS
function verificarCSS() {
    console.group("%cüé® Analisando CSS...", "color: purple; font-weight: bold;");
    let erros = 0;
    const styles = document.styleSheets;

    for (let sheet of styles) {
        try {
            for (let rule of sheet.cssRules) {
                if (rule.selectorText && rule.selectorText.includes("#")) {
                    let id = rule.selectorText.replace("#", "").split(" ")[0];
                    if (!document.getElementById(id)) {
                        console.warn(`‚ö†Ô∏è O seletor CSS '${rule.selectorText}' est√° apontando para um ID inexistente no HTML.`);
                        erros++;
                    }
                }
            }
        } catch (err) {
            console.error("‚ùå Erro ao acessar regras CSS:", err.message);
        }
    }

    if (erros === 0) {
        console.info("‚úÖ Nenhum erro cr√≠tico encontrado no CSS.");
    }
    console.groupEnd();
}

// üîπ Analisador de JavaScript
function verificarJavaScript() {
    console.group("%cüõ†Ô∏è Analisando JavaScript...", "color: orange; font-weight: bold;");
    let erros = 0;

    // Verifica chamadas a fun√ß√µes inexistentes
    document.querySelectorAll("[onclick]").forEach(el => {
        let funcaoChamada = el.getAttribute("onclick").split("(")[0].trim();
        if (typeof window[funcaoChamada] !== "function") {
            console.error(`üö® ERRO: A fun√ß√£o '${funcaoChamada}()' foi chamada, mas n√£o est√° definida!`);
            erros++;
        }
    });

    // Verifica chamadas a elementos inexistentes
    document.querySelectorAll("*").forEach(el => {
        if (el.id && !document.getElementById(el.id)) {
            console.warn(`‚ö†Ô∏è O JavaScript pode estar tentando acessar #${el.id}, mas ele n√£o existe no HTML.`);
        }
    });

    if (erros === 0) {
        console.info("‚úÖ Nenhum erro cr√≠tico encontrado no JavaScript.");
    }
    console.groupEnd();
}

// üîπ Resumo dos erros
function mostrarResumo() {
    console.log("%cüìä RESUMO DA AN√ÅLISE:", "background: #000; color: #fff; font-size: 16px; font-weight: bold; padding: 4px;");

    let totalErros = document.querySelectorAll(".error-log").length;

    if (totalErros === 0) {
        console.log("%cüöÄ Parab√©ns! Nenhum erro cr√≠tico foi encontrado no seu c√≥digo.", "color: green; font-weight: bold;");
    } else {
        console.log("%c‚ö†Ô∏è Foram detectados erros que podem impactar o funcionamento do seu sistema. Revise os logs acima!", "color: red; font-weight: bold;");
    }
}

// üîπ Executar todas as an√°lises ap√≥s o carregamento da p√°gina
window.addEventListener("load", () => {
    console.log("%c üõ†Ô∏è HOPWEB DEBUGGER: Iniciando an√°lise completa...", "background: #222; color: #fff; font-size: 14px; font-weight: bold;");
    
    verificarHTML();
    verificarCSS();
    verificarJavaScript();
    mostrarResumo();
});